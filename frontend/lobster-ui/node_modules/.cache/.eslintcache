[{"/Users/charlottekies/Desktop/GitHub/lobster/frontend/lobster-ui/src/index.js":"1","/Users/charlottekies/Desktop/GitHub/lobster/frontend/lobster-ui/src/App.js":"2","/Users/charlottekies/Desktop/GitHub/lobster/frontend/lobster-ui/src/reportWebVitals.js":"3"},{"size":535,"mtime":1655763164907,"results":"4","hashOfConfig":"5"},{"size":3969,"mtime":1656543460331,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1655763164000,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","suppressedMessages":"10","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"11"},"le2l2c",{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/charlottekies/Desktop/GitHub/lobster/frontend/lobster-ui/src/index.js",[],[],[],"/Users/charlottekies/Desktop/GitHub/lobster/frontend/lobster-ui/src/App.js",["19"],[],"import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport React from \"react\";\nimport axios from \"axios\";\nimport { Line } from \"react-chartjs-2\";\n// you MUST register your chart in order to use it, to prevent Category error\nimport { Chart, registerables } from \"chart.js\";\nChart.register(...registerables);\n\n// create an Axios instance, in order to call the backend\nconst http = axios.create({\n  baseURL: \"http://localhost:8080\",\n});\n\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isLoading: true,\n      lobsterData: {},\n      data: \"\",\n      dates: [],\n      prices: [],\n      pricesInDollars: [],\n    };\n  }\n\n  //After mount, this hook runs\n  componentDidMount() {\n    console.debug(\"After mount! Let's load data from API...\");\n\n    // get Historical Lobster Prices from the server\n    http.get(\"/lobsters/historical-price-data\").then((response) => {\n      this.setState({ lobsterData: response.data.observations });\n\n      // set Line Data with returned historical price data\n      this.setData(response.data.observations);\n      // set loading to false, so the correct div will display on the screen\n      this.setState({ isLoading: false });\n    });\n  }\n\n  // set Line graph data with returned historical lobster prices\n  setData(data) {\n    // initialize state arrays for lobster Prices and Dates\n    this.setPricesAndDates(data);\n    // use the state arrays for prices and dates to initialize the chart data\n    this.setState({\n      data: {\n        labels: this.state.dates,\n        datasets: [\n          {\n            label: \"Historical Lobster Prices\",\n            data: this.state.prices,\n            fill: true,\n            backgroundColor: \"rgba(75,192,192,0.2)\",\n            borderColor: \"rgba(75,192,192,1)\",\n          },\n        ],\n      },\n    });\n  }\n\n  setPricesAndDates(data) {\n    let value = \"\";\n    let values = [];\n    let dates = [];\n    let dollarValues = [4.2147303699496];\n\n    data.forEach((month, index) => {\n      if (month.value !== \".\") {\n        value = parseFloat(month.value);\n        values.push(value);\n        // if index > 0,\n        if (index > 0) {\n          // Calculate percentage increase/decrease from value at index-1 to value\n          if (values[0] > value) {\n            let percentDecrease = (values[0] - value) / values[0];\n            let newDollarValue =\n              dollarValues[0] + dollarValues[0] * percentDecrease;\n            dollarValues.push(newDollarValue);\n            // if the price of lobster is less than what it was in December, 1991:\n          } else {\n            let percentIncrease = (value - values[0]) / values[0];\n            let newDollarValue =\n              dollarValues[0] + dollarValues[0] * percentIncrease;\n            dollarValues.push(newDollarValue);\n          }\n        }\n\n        // Calculate dollar amount increase/decrease from dollarValue at index-1\n        // add result ^^ to dollarValues\n      } else {\n        values.push(\".\");\n        dollarValues.push(\".\");\n      }\n      dates.push(month.date);\n    });\n    this.setState({ dates: dates });\n    this.setState({ prices: values });\n    this.setState({ dollarValues: dollarValues });\n  }\n\n  // This is what displays on the page\n  render() {\n    // Define two constants from state variables\n    const { isLoading, data } = this.state;\n\n    // condition 1. If data has not been returned, show this div\n    if (isLoading) {\n      return (\n        <div className=\"App\">\n          <p>Lobsters coming soon...</p>\n        </div>\n      );\n\n      // otherwise, condition 2: Load the data in a chart\n    } else {\n      return (\n        <div className=\"App\">\n          <h1>Lobster Data</h1>\n          {/* data is a constant defined using state in Render() */}\n          <div id=\"chart-container-container\">\n            <div id=\"chart-container\">\n              <Line id=\"chart\" data={data} />\n            </div>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n","/Users/charlottekies/Desktop/GitHub/lobster/frontend/lobster-ui/src/reportWebVitals.js",[],[],{"ruleId":"20","severity":1,"message":"21","line":1,"column":8,"nodeType":"22","messageId":"23","endLine":1,"endColumn":12},"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar"]